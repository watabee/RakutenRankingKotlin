apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        minSdkVersion buildConfig.minSdk
    }
    
    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation deps.androidx.appCompat
    implementation deps.androidx.lifecycleExtension
    implementation deps.okhttp.logging
    api deps.timber
}

kotlin {
    sourceSets {
        commonMain {
            kotlin {
                srcDirs 'build/sqldelight'
            }
            dependencies {
                implementation deps.kotlin.stdlib.common
                implementation deps.kotlin.coroutines.common
                implementation deps.kotlin.serialization.common
                implementation deps.ktor.client.core
                implementation deps.ktor.client.json.core
                implementation deps.knarch.db
                implementation deps.sqldelight.runtime
                implementation deps.sqldelight.multiplatformdriver
            }
        }

        androidMain {
            dependencies {
                implementation deps.kotlin.stdlib.jdk
                implementation deps.kotlin.coroutines.jdk
                implementation deps.kotlin.coroutines.android
                implementation deps.kotlin.serialization.jdk
                implementation deps.ktor.client.okhttp
                implementation deps.ktor.client.json.jvm
                implementation deps.knarch.dbAndroid
                implementation deps.sqldelight.runtimeJdk
                implementation deps.sqldelight.multiplatformdriverAndroid
            }
        }

        iosMain {
            dependencies {
                implementation deps.kotlin.coroutines.native
                implementation deps.kotlin.serialization.native
                implementation deps.ktor.client.ios
                implementation deps.ktor.client.json.ios
                implementation deps.knarch.dbNative
                implementation deps.sqldelight.runtimeNative
                implementation deps.sqldelight.multiplatformdriverNative
            }
        }
    }

    targets {
        fromPreset(presets.android, 'android')

        fromPreset(presets.iosArm64, 'iosArm64')
        fromPreset(presets.iosX64, 'iosX64')

        configure([iosArm64, iosX64]) {
            compilations.main {
                source(sourceSets.iosMain)
                outputKinds('FRAMEWORK')
                extraOpts "-Xuse-experimental=kotlin.Experimental",
                    "-Xuse-experimental=kotlin.ExperimentalMultiplatform"
            }
            compilations.each {
                it.extraOpts("-linker-options", "-lsqlite3")
            }
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

sqldelight {
    packageName = "com.github.watabee.rakutenranking.db"
}

tasks.preBuild.dependsOn("generateSqlDelightInterface")

task setupIos(type: Exec) {
    workingDir "${rootDir}/ios"
    commandLine "sh", "./scripts/setup.sh", propOrEnv("RAKUTEN_APP_ID")
}

// createIosDebugFatFramework or createIosReleaseFatFramework
project.afterEvaluate {
    final String frameworkName = "${project.name}.framework"
    final String binaryName = project.name

    ["Debug", "Release"].each { buildType ->

        final String outputDir = "${buildDir}/xcode-frameworks"
        final String frameworkOutputPath = "${outputDir}/${frameworkName}"
        final String binaryOutputPath = "${frameworkOutputPath}/${binaryName}"

        project.tasks.create("createIos${buildType}FatFramework") { task ->
            final String linkTaskArm64 = kotlin.targets.iosArm64.compilations.main.linkTaskName("FRAMEWORK", buildType)
            final String linkTaskX64 = kotlin.targets.iosX64.compilations.main.linkTaskName("FRAMEWORK", buildType)

            task.dependsOn generateSqlDelightInterface
            task.dependsOn linkTaskArm64
            task.dependsOn linkTaskX64

            task.doLast {
                final String outputArm64 = project.tasks.getByName(linkTaskArm64).outputFile.get().parentFile.absolutePath
                final String outputX64 = project.tasks.getByName(linkTaskX64).outputFile.get().parentFile.absolutePath

                exec { exec ->
                    new File(frameworkOutputPath).mkdirs()

                    def args = ["-create"]

                    args.addAll(["-arch", "arm64", "${outputArm64}/${frameworkName}/${binaryName}"])
                    args.addAll(["-arch", "x86_64", "${outputX64}/${frameworkName}/${binaryName}"])
                    args.addAll(["-output", "${binaryOutputPath}"])

                    exec.executable = "lipo"
                    exec.args = args
                }

                final String frameworkPathArm64 = "${outputArm64}/${frameworkName}"
                copy { copy ->
                    copy.from(frameworkPathArm64) { from ->
                        from.exclude(binaryName)
                    }
                    copy.into(frameworkOutputPath)
                }

                final String plistPath = "${frameworkOutputPath}/Info.plist"
                exec { exec ->
                    exec.executable = "/usr/libexec/PlistBuddy"
                    exec.args = ["-c", "Delete :UIRequiredDeviceCapabilities", plistPath]
                }

                exec { exec ->
                    exec.executable = "/usr/libexec/PlistBuddy"
                    exec.args = ["-c", "Add :CFBundleSupportedPlatforms:1 string iPhoneSimulator", plistPath]
                }
            }
        }
    }
}